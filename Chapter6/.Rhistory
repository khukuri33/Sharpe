library(mlbench)
library(mice)
data("HouseVotes84")
intersect_event <- function(A,B,df){
return(df[intersect(A$names,B$names),])
}
prob <- function(E,S){
return(nrow(E)/nrow(S))
}
imputeddf=mice(HouseVotes84,m=1,maxit=50,meth='pmm',seed=500)
imputeddf=mice(HouseVotes84,m=1,maxit=50,meth='pmm',seed=500)
library(mice)
completedData <- complete(imputeddf,1)
df=completedData
df$names<-rownames(df)
library(mice)
install.packages("mlbench", "mice")
install.packages("mlbench", "mice")
install.packages("mlbench", "mice")
library(mlbench)
library(mice)
data("HouseVotes84")
intersect_event <- function(A,B,df){
return(df[intersect(A$names,B$names),])
}
prob <- function(E,S){
return(nrow(E)/nrow(S))
}
imputeddf=mice(HouseVotes84,m=1,maxit=50,meth='pmm',seed=500)
completedData <- complete(imputeddf,1)
df=completedData
df$names<-rownames(df)
library(mlbench)
library(mice)
install.packages("mice")
imputeddf=mice(HouseVotes84,m=1,maxit=50,meth='pmm',seed=500)
imputeddf=mice(HouseVotes84,m=1,maxit=50,meth='pmm',seed=500)
imputeddf <- mice(HouseVotes84,m=1,maxit=50,meth='pmm',seed=500)
library(mlbench)
library(mice)
imputeddf=mice(HouseVotes84,m=1,maxit=50,meth='pmm',seed=500)
completedData <- complete(imputeddf,1)
df=completedData
df$names<-rownames(df)
df$names
View(HouseVotes84)
dfparam
View(dfparam)
completedData <- complete(imputeddf,1)
df=completedData
df$names<-rownames(df)
CompleteBayes_singleClass <- function(class='republican',v1='y',v2='y',v3='y',v4='y',dfparam=df){
X_bool=df$V1==v1 & df$V2==v2 & df$V3==v3 & df$V4==v4
X=df[X_bool,]
class_bool=df$Class==class
classE=df[class_bool,]
ClassIntsX=intersect_event(X,classE,dfparam)
numeratorProb=prob(ClassIntsX,dfparam)
denominatorProb=prob(X,dfparam)
return(numeratorProb/denominatorProb)
}
CompleteBayes_singleClass('democrat','y','y','y','y',df)
CompleteBayes_singleClass('democrat','y','y','y','y',df)
CompleteBayes_singleClass('democrat','y','y','y','n',df)
CompleteBayes_singleClass('republican','y','y','y','n',df)
CompleteBayes_singleClass('republican','y','y','n','n',df)
CompleteBayes_singleClass()
CompleteBayes_singleClass("democrat",,"y",,"n",df)
conditional_prob <- function(A,B,df){
prob(intersect_event(A,B,df),df)/prob(B,df)
}
CompleteBayes_try <- function(class= "republican", v1="y",v2="y",v3="y",v4="y", dfparm=df){
X_bool = df$V1==v1 & df$V2==v2 & df$V3==v3 & df$V4==v4
X=df[X_bool,]
class_bool=df$Class==class
classE=df[class_bool,]
conditional_prob(X,ClassE,dfparm)
}
CompleteBayes_singleClass('republican','y','y','n','n',df)
CompleteBayes_try('republican','y','y','n','n',df)
CompleteBayes_try('republican','y','y','n','n',df)
CompleteBayes_try <- function(class= "republican", v1="y",v2="y",v3="y",v4="y", dfparm=df){
X_bool = df$V1==v1 & df$V2==v2 & df$V3==v3 & df$V4==v4
X=df[X_bool,]
class_bool=df$Class==class
classE=df[class_bool,]
conditional_prob(X,classE,dfparm)
}
CompleteBayes_try('republican','y','y','n','n',df)
CompleteBayes_try <- function(class= "republican", v1="y",v2="y",v3="y",v4="y", dfparm=df){
X_bool = df$V1==v1 & df$V2==v2 & df$V3==v3 & df$V4==v4
X=df[X_bool,]
class_bool=df$Class==class
classE=df[class_bool,]
conditional_prob(X,classE,dfparm)
}
print(df)
predCompleteBayes=function(class="Class",v1='y',v2='y',v3='y',v4='y',dfparam=df){
forecast=list()
lev=levels(dfparam[,class])
classprob=0
predictedclass=lev[1]
for(i in lev){
p=CompleteBayes_singleClass(i,v1,v2,v3,v4,dfparam)
if(classprob<p){
classprob=p
predictedclass=i
forecast[["predicted class"]]=predictedclass
forecast[["probability"]]=classprob
}
}
return(forecast)
}
predCompleteBayes('democrat','y','y','y','n',df)
predCompleteBayes=function(class="Class",v1='y',v2='y',v3='y',v4='y',dfparam=df){
forecast=list()
lev=levels(dfparam[,class])
classprob=0
predictedclass=lev[1]
for(i in lev){
p=CompleteBayes_singleClass(i,v1,v2,v3,v4,dfparam)
if(classprob<p){
classprob=p
predictedclass=i
forecast[["predicted class"]]=predictedclass
forecast[["probability"]]=classprob
}
}
return(forecast)
}
predCompleteBayes('democrat','y','y','y','n',df)
levels(df$Class)
levels(df[class()])
predCompleteBayes=function(class="Class",v1='y',v2='y',v3='y',v4='y',dfparam=df){
forecast=list()
lev=levels(dfparam[,Class])
classprob=0
predictedclass=lev[1]
for(i in lev){
p=CompleteBayes_singleClass(i,v1,v2,v3,v4,dfparam)
if(classprob<p){
classprob=p
predictedclass=i
forecast[["predicted class"]]=predictedclass
forecast[["probability"]]=classprob
}
}
return(forecast)
}
predCompleteBayes('democrat','y','y','y','n',df)
predCompleteBayes=function(class="Class",v1='y',v2='y',v3='y',v4='y',dfparam=df){
forecast=list()
lev=levels(dfparam[,class])
classprob=0
predictedclass=lev[1]
for(i in lev){
p=CompleteBayes_singleClass(i,v1,v2,v3,v4,dfparam)
if(classprob<p){
classprob=p
predictedclass=i
forecast[["predicted class"]]=predictedclass
forecast[["probability"]]=classprob
}
}
return(forecast)
}
predCompleteBayes('democrat','y','y','y','n',df)
predCompleteBayes=function(class="Class",v1='y',v2='y',v3='y',v4='y',dfparam=df){
forecast=list()
lev=levels(dfparam[class])
classprob=0
predictedclass=lev[1]
for(i in lev){
p=CompleteBayes_singleClass(i,v1,v2,v3,v4,dfparam)
if(classprob<p){
classprob=p
predictedclass=i
forecast[["predicted class"]]=predictedclass
forecast[["probability"]]=classprob
}
}
return(forecast)
}
predCompleteBayes('democrat','y','y','y','n',df)
predCompleteBayes("republican","y","n","y","n")
predCompleteBayes=function(class="Class",v1='y',v2='y',v3='y',v4='y',dfparam=df){
forecast=list()
lev=levels(dfparam[,class])
classprob=0
predictedclass=lev[1]
for(i in lev){
p=CompleteBayes_singleClass(i,v1,v2,v3,v4,dfparam)
if(classprob<p){
classprob=p
predictedclass=i
forecast[["predicted class"]]=predictedclass
forecast[["probability"]]=classprob
}
}
return(forecast)
}
predCompleteBayes("republican","y","n","y","n")
predCompleteBayes(class="Class",v1='y',v2='y',v3='y',v4='y',dfparam=df)
predCompleteBayes(class="Class",v1='n',v2='n',v3='n',v4='n',dfparam=df)
predCompleteBayestry=function(class="Class",v1='y',v2='y',v3='y',v4='y',dfparam=df){
forecast=list()
lev=levels(dfparam$class)
classprob=0
predictedclass=lev[1]
for(i in lev){
p=CompleteBayes_singleClass(i,v1,v2,v3,v4,dfparam)
if(classprob<p){
classprob=p
predictedclass=i
forecast[["predicted class"]]=predictedclass
forecast[["probability"]]=classprob
}
}
return(forecast)
}
predCompleteBayestry(class="Class",v1='n',v2='n',v3='n',v4='n',dfparam=df)
predCompleteBayestry=function(class="Class",v1='y',v2='y',v3='y',v4='y',dfparam=df){
forecast=list()
lev=levels(dfparam$class)
classprob=0
predictedclass=lev[1]
for(i in lev){
print(lev)
p=CompleteBayes_singleClass(i,v1,v2,v3,v4,dfparam)
if(classprob<p){
classprob=p
predictedclass=i
forecast[["predicted class"]]=predictedclass
forecast[["probability"]]=classprob
}
}
return(forecast)
}
predCompleteBayestry(class="Class",v1='n',v2='n',v3='n',v4='n',dfparam=df)
predCompleteBayestry=function(class="Class",v1='y',v2='y',v3='y',v4='y',dfparam=df){
forecast=list()
lev=levels(dfparam$Class)
classprob=0
predictedclass=lev[1]
for(i in lev){
print(lev)
p=CompleteBayes_singleClass(i,v1,v2,v3,v4,dfparam)
if(classprob<p){
classprob=p
predictedclass=i
forecast[["predicted class"]]=predictedclass
forecast[["probability"]]=classprob
}
}
return(forecast)
}
predCompleteBayestry(class="Class",v1='n',v2='n',v3='n',v4='n',dfparam=df)
colnames(Arthritis)
library("Arthritis")
data("Arthritis")
data("Arthritis")
data("Arthritis")
colnames(Arthritis)
data("Arthritis")
library(mlbench)
library(mice)
data("HouseVotes84")
data("Arthritis")
library(vcd)
install.packages("vcd")
library(vcd)
data("Arthritis")
head(Arthritis)
colnames(Arthritis)
Arthritis=Arthritis[,-c(1)]
View(Arthritis)
Arthritis=Arthritis[,-c(3)]
v="and a variable"
paste("many", "strings",v, "to","one", "string")
CompleteBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, â€¦)
args<-list(...)
lev=levels(dfparam[,class])
classprob=0
predictedclass=lev[1]
for(i in lev){
p=CompleteBayes_singleClass(i,v1,v2,v3,v4,dfparam)
if(classprob<p){
classprob=p
predictedclass=i
forecast[["predicted class"]]=predictedclass
forecast[["probability"]]=classprob
}
}
return(forecast)
}
CompleteBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
args<-list(...)
count <- length(args)
xb1 <- ""
for(i in 1:count){
if(i==1){
xb1=paste0(xb1,"dfparam[,names(args)[",i,"]]==args[[",i,"]]")}
else
xb1 <- paste0(xb1,"&","dfparam[,names(args)[",i,"]]==args[[",i,"]]")
}
X_bool<- eval(parse(text=xb1))
X=dfparam[X_bool,]
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
ClassIntsX=intersect_event(X,classE,dfparam)
numeratorProb=prob(ClassIntsX,dfparam)
denominatorProb=prob(X,dfparam)
return(numeratorProb/denominatorProb)
}
CompleteBayes_singleClassEllipsis("Treatment","Treated",Arthritis, Sex='Male',Improved='Marked')
str(arg)
CompleteBayes_singleClassEllipsis(,,HouseVotes84,V1="y",V2="n",V3="y")
CompleteBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
browser()
args<-list(...)
count <- length(args)
xb1 <- ""
for(i in 1:count){
if(i==1){
xb1=paste0(xb1,"dfparam[,names(args)[",i,"]]==args[[",i,"]]")}
else
xb1 <- paste0(xb1,"&","dfparam[,names(args)[",i,"]]==args[[",i,"]]")
}
X_bool<- eval(parse(text=xb1))
X=dfparam[X_bool,]
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
ClassIntsX=intersect_event(X,classE,dfparam)
numeratorProb=prob(ClassIntsX,dfparam)
denominatorProb=prob(X,dfparam)
return(numeratorProb/denominatorProb)
}
CompleteBayes_singleClassEllipsis(,,HouseVotes84,V1="y",V2="n",V3="y")
1
2
3
CompleteBayes_singleClassEllipsis(,,HouseVotes84,V1="y",V2="n",V3="y")
y
colnames(HouseVotes84[,1])
colnames(HouseVotes84[1])
a <- c(2,3,4)
b <- c(2,3,6)
a%*%b[2,2]
a%*%b[1]
a%*%b
a%*%b(2)
table(a%*%b)
is.max(table(a%*%b))
is.greatest(table(a%*%b))
greatest(table(a%*%b))
(table(a%*%b))[2]
(table(a%*%b))[,2]
(table(a%*%b))[1]
