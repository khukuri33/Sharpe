install.packages("quantmod")
library(quantmod)
getsymbols("ZM",from = "2020-1-1", to = "2020-6-1", auto.assign = TRUE)
library(quantmod)
getsymbols("ZM",from = "2020-1-1", to = "2020-6-1", auto.assign = TRUE)
getSymbols("ZM",from = "2020-1-1", to = "2020-6-1", auto.assign = TRUE)
View(ZM)
getSymbols("PLUG",from = "2020-1-1", to = "2020-6-1", auto.assign = TRUE)
getSymbols("NVAX",from = "2020-1-1", to = "2020-6-1", auto.assign = TRUE)
df <- data.frame()
head(ZM)
ZM <- ZM[,-1]
ZM <- ZM[,-1]
ZM <- ZM[,-1]
ZM <- ZM[,-1]
ZM <- ZM[,-1]
PLUG <- PLUG[,-1,-2]
View(PLUG)
getSymbols("PLUG",from = "2020-1-1", to = "2020-6-1", auto.assign = TRUE)
PLUG <- PLUG[,-1]
PLUG <- PLUG[,-1]
PLUG <- PLUG[,-1]
PLUG <- PLUG[,-1]
PLUG <- PLUG[,-1]
NVAX <- NVAX[,-1]
NVAX <- NVAX[,-1]
NVAX <- NVAX[,-1]
View(NVAX)
NVAX <- NVAX[,-1]
NVAX <- NVAX[,-1]
ZM[1,1]
ZM[2,1] - ZM[1,1]
ZM[2,1]
ZM$ZM.Adjusted
ZM$ZM.Adjusted[1]
# this package allowes us to get data from yahoo finance directly
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
library(PerformanceAnalytics)
# Above this is just getting the data and fixing it, I am thinking of puting a list of stocks through a
#loop to by using eval(parse()) to get teh highest possible ratio, this is just to test out how it works
# the first part of the calculation is to get (Dt-(DT-1) or the daily difference in the stock price
ZM["ZM_expected_return"] <- dailyReturn(ZM, )
# Above this is just getting the data and fixing it, I am thinking of puting a list of stocks through a
#loop to by using eval(parse()) to get teh highest possible ratio, this is just to test out how it works
# the first part of the calculation is to get (Dt-(DT-1) or the daily difference in the stock price
ZM["ZM_expected_return"] <- dailyReturn(ZM, type = "log")
# Above this is just getting the data and fixing it, I am thinking of puting a list of stocks through a
#loop to by using eval(parse()) to get teh highest possible ratio, this is just to test out how it works
# the first part of the calculation is to get (Dt-(DT-1) or the daily difference in the stock price
zmreturn <- dailyReturn(ZM, type = "log")
View(zmreturn)
# Above this is just getting the data and fixing it, I am thinking of puting a list of stocks through a
#loop to by using eval(parse()) to get teh highest possible ratio, this is just to test out how it works
# the first part of the calculation is to get (Dt-(DT-1) or the daily difference in the stock price
zmreturn <- na.omit(dailyReturn(ZM, type = "log"))
ZM["Daily_return"] <- zmreturn
zmreturn[1]
zmreturn$daily.returns
colnames(zmreturn)
plugreturn <- dailyReturn(PLUG, type = "log")
nvaxreturn <- dailyReturn(NVAX, type = "log")
View(plugreturn)
View(plugreturn)
View(nvaxreturn)
View(nvaxreturn)
zmreturn[-c(1)]
chartSeries(ZM)
stocks <- c("PLUG", "ZM", "NVAX")
weights <- c(.333,.333,.333)
portfolio_prices <- NULL
cbind?
?cbind
x <- getsymbols.yahoo("ZM", from "2020-01-01", periodicity= "daily", auto.assign = FALSE)
x <- getsymbols.yahoo("ZM", from = "2020-01-01", periodicity= "daily", auto.assign = FALSE)
getSymbols('MSFT',src='yahoo')
x <- getsymbols.yahoo("ZM", from = "2020-01-01", periodicity= "daily", auto.assign = FALSE)
getSymbols('MSFT',src='yahoo')
setSymbolLookup(MSFT='yahoo')
x <- getsymbols.yahoo("ZM", from = "2020-01-01", periodicity= "daily", auto.assign = FALSE)
x <- getsymbols.yahoo("ZM", from = "2020-01-01", periodicity= "daily", auto.assign = FALSE)[,4]
x <- getSymbols.yahoo("ZM", from = "2020-01-01", periodicity= "daily", auto.assign = FALSE)
x
View(x)
x <- getSymbols.yahoo("ZM", from = "2020-01-01", periodicity= "daily", auto.assign = FALSE)[,4]
x <- getSymbols.yahoo("ZM", from = "2020-01-01", periodicity= "daily", auto.assign = FALSE)[,6]
portfolio_prices <- cbind(portfolio_prices, getSymbols.yahoo(stock, from = "2020-01-01", periodicity= "daily", auto.assign = FALSE)[,6])
portfolio_prices <- NULL
for(stock in stocks){
portfolio_prices <- cbind(portfolio_prices, getSymbols.yahoo(stock, from = "2020-01-01", periodicity= "daily", auto.assign = FALSE)[,6])
}
View(portfolio_prices)
View(portfolio_prices)
colSums(is.na(portfolio_prices))
#to calculate the daily change in all of the stocks
portfolio_returns <- na,omit(ROC(portfolio_prices))
#to calculate the daily change in all of the stocks
portfolio_returns <- na.omit(ROC(portfolio_prices))
View(portfolio_returns)
View(portfolio_returns)
portfolio_return <- Return,portfolio(portfolio_returns)
portfolio_return <- Return.portfolio(portfolio_returns)
View(portfolio_return)
#sharpe ratio for this portfolio with equal weight can be calculated with a in built function
SharpeRatio(portfolio_returns, .035/252)
#sharpe ratio for this portfolio with equal weight can be calculated with a in built function
SharpeRatio(portfolio_return, .035/252)
#sharpe ratio for this portfolio with equal weight can be calculated with a in built function
SharpeRatio(portfolio_return, .035/252, weights = c(.5,.2,.3))
#sharpe ratio for this portfolio with equal weight can be calculated with a in built function
SharpeRatio(portfolio_return, .035/252) weights = c(.5,.2,.3))
#sharpe ratio for this portfolio with equal weight can be calculated with a in built function
SharpeRatio(portfolio_return, .035/252)
?Return.portfolio
weights <- c(.3,.2,.5)
#to calculate the daily change in all of the stocks
portfolio_returns <- na.omit(ROC(portfolio_prices, weights = weights))
weight <- c(.3,.2,.5)
#to calculate the daily change in all of the stocks
portfolio_returns <- na.omit(ROC(portfolio_prices, weights = weight))
View(portfolio_return)
View(portfolio_return)
data(edhec)
View(edhec)
Return.portfolio(edhec["1997",1:5], rebalance_on="quarters")
Return.portfolio(edhec["1997",1:5], rebalance_on="quarters", verbose=TRUE)
install.packages('BatchGetSymbols')
library(BatchGetSymbols)
first_date <- Sys.Date()-1*365
last_date <- Sys.Date()
thresh_bad_data <- 0.95   # sets percent threshold for bad data
bench_ticker <- '^GSPC'   # set benchmark as ibovespa
cache_folder <- 'data/BGS_Cache' # set folder for cache
l_out <- BatchGetSymbols(tickers = stocks,
first.date = first_date,
last.date = last_date,
bench.ticker = bench_ticker,
thresh.bad.data = thresh_bad_data,
cache.folder = cache_folder)
first_date <- Sys.Date()-1*365
last_date <- Sys.Date()
thresh_bad_data <- 0.95   # sets percent threshold for bad data
bench_ticker <- '^GSPC'   # set benchmark as ibovespa
cache_folder <- 'C:\Users\mailt\Documents\R\a' # set folder for cache
l_out <- BatchGetSymbols(tickers = stocks,
first.date = first_date,
last.date = last_date,
bench.ticker = bench_ticker,
thresh.bad.data = thresh_bad_data,
cache.folder = cache_folder)
first_date <- Sys.Date()-1*365
last_date <- Sys.Date()
thresh_bad_data <- 0.95   # sets percent threshold for bad data
bench_ticker <- '^GSPC'   # set benchmark as ibovespa
cache_folder <- 'C:\Users\mailt\Documents\R\a' # set folder for cache
l_out <- BatchGetSymbols(tickers = stocks,
first.date = first_date,
last.date = last_date,
bench.ticker = bench_ticker,
thresh.bad.data = thresh_bad_data,
cache.folder = cache_folder)
cache_folder <- 'C:\Users\mailt\Documents\R\a' # set folder for cache
#C:\Users\mailt\Documents\R\a
getwd()
first_date <- Sys.Date()-1*365
last_date <- Sys.Date()
thresh_bad_data <- 0.95   # sets percent threshold for bad data
bench_ticker <- '^GSPC'   # set benchmark as ibovespa
cache_folder <- 'C:/Users/mailt/Documents/R/Project/data/BGS_Cache' # set folder for cache
#C:\Users\mailt\Documents\R\a
l_out <- BatchGetSymbols(tickers = stocks,
first.date = first_date,
last.date = last_date,
bench.ticker = bench_ticker,
thresh.bad.data = thresh_bad_data,
cache.folder = cache_folder)
# set tickers
tickers <- c('PLUG','ZM','NVAX','abcdef')
first.date <- Sys.Date() - 60
last.date <- Sys.Date()
freq.data <- 'daily'
# set tickers
tickers <- c('PLUG','ZM','NVAX','abcdef')
l.out <- BatchGetSymbols(tickers = tickers,
first.date = first.date,
last.date = last.date,
freq.data = freq.data,
cache.folder = file.path(tempdir(),
'BGS_Cache') ) # cache in tempdir()
View(l.out)
View(l.out)
l.out$df.tickers$price.adjusted
is(l.out$df.tickers$price.adjusted)
l.out$df.tickers$ticker
library(ggplot2)
p <- ggplot(l.out$df.tickers, aes(x = ref.date, y = price.close))
p <- p + geom_line()
p <- p + facet_wrap(~ticker, scales = 'free_y')
print(p)
install.packages(ggplot2)
install.packages(ggplot)
install.packages("ggplot2")
library(ggplot2)
p <- ggplot(l.out$df.tickers, aes(x = ref.date, y = price.close))
p <- p + geom_line()
p <- p + facet_wrap(~ticker, scales = 'free_y')
print(p)
a <- ggplot(portfolio_return, aes(y = portfolio_returns))
print(a)
rownames(portfolio_return)
?Return.portfolio
