return(numerator/denominator)
}
NaiveBayes_singleClassEllipsis("Treatment","Treated",Arthritis, Sex='Male',Improved='Marked')
NaiveBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
args<-list(...)
count <- length(args)
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
numerator=prob(classE,dfparam)
for(i in 1:count){
numerator=numerator*conditional_prob_bool(names(args)[i],args[[i]],className,classValue,dfparam)
}
denominator=0
classLevels=levels(dfparam[,className])
countOfClassLevels=length(classLevels)
for(j in 1:countOfClassLevels){
class_bool=dfparam[,className]==classLevels[j]
classE=dfparam[class_bool,]
denominatorFactor=prob(classE,dfparam)
for(i in 1:count){
denominatorFactor=denominatorFactor*conditional_prob_bool(className, classLevels[j],names(args)[i],args[[i]],dfparam)
}
denominator=denominator+denominatorFactor
browser()
}
return(numerator/denominator)
}
NaiveBayes_singleClassEllipsis("Treatment","Treated",Arthritis, Sex='Male',Improved='Marked')
denominator
NaiveBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
args<-list(...)
count <- length(args)
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
numerator=prob(classE,dfparam)
for(i in 1:count){
numerator=numerator*conditional_prob_bool(names(args)[i],args[[i]],className,classValue,dfparam)
}
denominator=0
classLevels=levels(dfparam[,className])
countOfClassLevels=length(classLevels)
for(j in 1:countOfClassLevels){
class_bool=dfparam[,className]==classLevels[j]
classE=dfparam[class_bool,]
denominatorFactor=prob(classE,dfparam)
for(i in 1:count){
denominatorFactor=denominatorFactor*conditional_prob_bool(className, classLevels[j],names(args)[i],args[[i]],dfparam)
}
denominator=denominator+denominatorFactor
}
return(numerator/denominator)
}
NaiveBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
args<-list(...)
count <- length(args)
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
numerator=prob(classE,dfparam)
for(i in 1:count){
browser()
numerator=numerator*conditional_prob_bool(names(args)[i],args[[i]],className,classValue,dfparam)
}
denominator=0
classLevels=levels(dfparam[,className])
countOfClassLevels=length(classLevels)
for(j in 1:countOfClassLevels){
class_bool=dfparam[,className]==classLevels[j]
classE=dfparam[class_bool,]
denominatorFactor=prob(classE,dfparam)
for(i in 1:count){
denominatorFactor=denominatorFactor*conditional_prob_bool(className, classLevels[j],names(args)[i],args[[i]],dfparam)
}
denominator=denominator+denominatorFactor
}
NaiveBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
args<-list(...)
count <- length(args)
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
numerator=prob(classE,dfparam)
for(i in 1:count){
browser()
numerator=numerator*conditional_prob_bool(names(args)[i],args[[i]],className,classValue,dfparam)
}
denominator=0
classLevels=levels(dfparam[,className])
countOfClassLevels=length(classLevels)
for(j in 1:countOfClassLevels){
class_bool=dfparam[,className]==classLevels[j]
classE=dfparam[class_bool,]
denominatorFactor=prob(classE,dfparam)
for(i in 1:count){
denominatorFactor=denominatorFactor*conditional_prob_bool(className, classLevels[j],names(args)[i],args[[i]],dfparam)
}
denominator=denominator+denominatorFactor
}
return(numerator/denominator)
}
NaiveBayes_singleClassEllipsis("Treatment","Treated",Arthritis, Sex='Male',Improved='Marked')
NaiveBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
args<-list(...)
count <- length(args)
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
numerator=prob(classE,dfparam)
for(i in 1:count){
browser()
numerator=numerator*conditional_prob_bool(names(args)[i],args[[i]],className,classValue,dfparam)
}
denominator=0
classLevels=levels(dfparam[,className])
countOfClassLevels=length(classLevels)
for(j in 1:countOfClassLevels){
class_bool=dfparam[,className]==classLevels[j]
classE=dfparam[class_bool,]
denominatorFactor=prob(classE,dfparam)
for(i in 1:count){
denominatorFactor=denominatorFactor*conditional_prob_bool(className, classLevels[j],names(args)[i],args[[i]],dfparam)
}
denominator=denominator+denominatorFactor
}
return(numerator/denominator)
}
NaiveBayes_singleClassEllipsis("Treatment","Treated",Arthritis, Sex='Male',Improved='Marked')
})
NaiveBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
args<-list(...)
count <- length(args)
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
numerator=prob(classE,dfparam)
for(i in 1:count){
browser()
numerator=numerator*conditional_prob_bool(names(args)[i],args[[i]],className,classValue,dfparam)
}
denominator=0
classLevels=levels(dfparam[,className])
countOfClassLevels=length(classLevels)
for(j in 1:countOfClassLevels){
class_bool=dfparam[,className]==classLevels[j]
classE=dfparam[class_bool,]
denominatorFactor=prob(classE,dfparam)
for(i in 1:count){
denominatorFactor=denominatorFactor*conditional_prob_bool(className, classLevels[j],names(args)[i],args[[i]],dfparam)
}
denominator=denominator+denominatorFactor
}
return(numerator/denominator)
}
NaiveBayes_singleClassEllipsis("Treatment","Treated",Arthritis, Sex='Male',Improved='Marked')
numerator
NaiveBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
args<-list(...)
count <- length(args)
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
numerator=prob(classE,dfparam)
for(i in 1:count){
numerator=numerator*conditional_prob_bool(names(args)[i],args[[i]],className,classValue,dfparam)
browser()
}
denominator=0
classLevels=levels(dfparam[,className])
countOfClassLevels=length(classLevels)
for(j in 1:countOfClassLevels){
class_bool=dfparam[,className]==classLevels[j]
classE=dfparam[class_bool,]
denominatorFactor=prob(classE,dfparam)
for(i in 1:count){
denominatorFactor=denominatorFactor*conditional_prob_bool(className, classLevels[j],names(args)[i],args[[i]],dfparam)
}
denominator=denominator+denominatorFactor
}
return(numerator/denominator)
}
NaiveBayes_singleClassEllipsis("Treatment","Treated",Arthritis, Sex='Male',Improved='Marked')
numerator
NaiveBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
args<-list(...)
count <- length(args)
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
numerator=prob(classE,dfparam)
for(i in 1:count){
numerator=numerator*conditional_prob_bool(names(args)[i],args[[i]],className,classValue,dfparam)
}
denominator=0
classLevels=levels(dfparam[,className])
countOfClassLevels=length(classLevels)
for(j in 1:countOfClassLevels){
class_bool=dfparam[,className]==classLevels[j]
classE=dfparam[class_bool,]
denominatorFactor=prob(classE,dfparam)
for(i in 1:count){
denominatorFactor=denominatorFactor*conditional_prob_bool(className, classLevels[j],names(args)[i],args[[i]],dfparam)
}
denominator=denominator+denominatorFactor
browser()
}
return(numerator/denominator)
}
NaiveBayes_singleClassEllipsis("Treatment","Treated",Arthritis, Sex='Male',Improved='Marked')
denominator
denominatorFactor
NaiveBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
args<-list(...)
count <- length(args)
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
numerator=prob(classE,dfparam)
for(i in 1:count){
browser()
numerator=numerator*conditional_prob_bool(names(args)[i],args[[i]],className,classValue,dfparam)
}
denominator=0
classLevels=levels(dfparam[,className])
countOfClassLevels=length(classLevels)
for(j in 1:countOfClassLevels){
class_bool=dfparam[,className]==classLevels[j]
classE=dfparam[class_bool,]
denominatorFactor=prob(classE,dfparam)
for(i in 1:count){
denominatorFactor=denominatorFactor*conditional_prob_bool(className, classLevels[j],names(args)[i],args[[i]],dfparam)
}
denominator=denominator+denominatorFactor
}
return(numerator/denominator)
}
NaiveBayes_singleClassEllipsis("Treatment","Treated",Arthritis, Sex='Male',Improved='Marked')
numerator
NaiveBayes_singleClassEllipsis("Treatment","Treated",Arthritis, Sex='Male',Improved='Marked')
count
library(mlbench)
library(mice)
data("HouseVotes84")
imputeddf=mice(HouseVotes84,m=1,maxit=50,meth='pmm',seed=500)
completedData <- complete(imputeddf,1)
dfHouse=completedData
df$names<-rownames(df)
intersect_event=function(a,b,df=df){
return(df[intersect(a$names,b$names),])}
union_event=function(E,F){
if(!is.data.frame(E)|!is.data.frame(F)){
stop("arguments must be a dataframe")
}
return(unique(rbind(E,F)))}
multi_union_event=function(E,F,...){return(unique(rbind(E,F,...)))}
complement=function(a,df){
df[!a,]
}
probBxconditional_prob= function(a,b,s){
return(prob(intersect_event(a,b,s),s))}
prob<-function( e, s) {
return(nrow(e)/nrow(s))}
bool2event<-function(E_bool,df){return(df[E_bool,])}
conditional_prob=function(a,b,s){
return(prob(intersect_event(a,b,s),s)/prob(b,s))
}
conditional_prob_bool <- function(varPrior, varPriorLevel, varCondition, varConditionLevel, df){
prior_bool <- df[,varPrior] == varPriorLevel
prior_event <- df[prior_bool,]
condition_bool <- df[,varCondition] == varConditionLevel
condition_event=df[condition_bool,]
return(prob(intersect_event(prior_event,condition_event,df),df)/prob(condition_event,df))
}
conditional_prob_bool('Class', 'democrat', 'V1', 'y', dfHouse)
install.packages("vcd")
library(vcd)
data("Arthritis")
data("HouseVotes84")
imputeddf=mice(Arthritis,m=1,maxit=50,meth='pmm',seed=500)
completedData <- complete(imputeddf,1)
dfArthritis=completedData
df$names<-rownames(df)
NaiveBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
args<-list(...)
count <- length(args)
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
numerator=prob(classE,dfparam)
for(i in 1:count){
browser()
numerator=numerator*conditional_prob_bool(names(args)[i],args[[i]],className,classValue,dfparam)
}
denominator=0
classLevels=levels(dfparam[,className])
countOfClassLevels=length(classLevels)
for(j in 1:countOfClassLevels){
class_bool=dfparam[,className]==classLevels[j]
classE=dfparam[class_bool,]
denominatorFactor=prob(classE,dfparam)
for(i in 1:count){
denominatorFactor=denominatorFactor*conditional_prob_bool(className, classLevels[j],names(args)[i],args[[i]],dfparam)
}
denominator=denominator+denominatorFactor
}
return(numerator/denominator)
}
NaiveBayes_singleClassEllipsis("Treatment","Treated",Arthritis, Sex='Male',Improved='Marked')
NaiveBayes_singleClassEllipsistry=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
args<-list(...)
count <- length(args)
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
numerator=prob(classE,dfparam)
for(i in 1:c ount){
browser()
numerator=numerator*conditional_prob_bool(names(args)[i],args[[i]],className,classValue,dfparam)
}
denominator=0
classLevels=levels(dfparam[,className])
countOfClassLevels=length(classLevels)
for(j in 1:countOfClassLevels){
class_bool=dfparam[,className]==classLevels[j]
classE=dfparam[class_bool,]
denominatorFactor=prob(classE,dfparam)
for(i in 1:count){
denominatorFactor=denominatorFactor*conditional_prob_bool(className, classLevels[j],names(args)[i],args[[i]],dfparam)
}
denominator=denominator+denominatorFactor
}
return(numerator/denominator)
}
forecast=list()
argsPred=list(...)
View(imputeddf)
predNaiveBayes("Treatment",Arthritis, Sex='Female',Improved='Some')
NaiveBayes_singleClassEllipsis("Treatment","Treated",Arthritis, Sex='Male',Improved='Marked')
NaiveBayes_singleClassEllipsis=function(className="Class",classValue="democrat",dfparam=df, ...){
dfparam=as.data.frame(dfparam)
dfparam$names<-rownames(dfparam)
args<-list(...)
count <- length(args)
class_bool=dfparam[,className]==classValue
classE=dfparam[class_bool,]
numerator=prob(classE,dfparam)
for(i in 1:count){
numerator=numerator*conditional_prob_bool(names(args)[i],args[[i]],className,classValue,dfparam)
}
denominator=0
classLevels=levels(dfparam[,className])
countOfClassLevels=length(classLevels)
for(j in 1:countOfClassLevels){
class_bool=dfparam[,className]==classLevels[j]
classE=dfparam[class_bool,]
denominatorFactor=prob(classE,dfparam)
for(i in 1:count){
denominatorFactor=denominatorFactor*conditional_prob_bool(className, classLevels[j],names(args)[i],args[[i]],dfparam)
}
denominator=denominator+denominatorFactor
}
return(numerator/denominator)
}
NaiveBayes_singleClassEllipsis("Treatment","Treated",Arthritis, Sex='Male',Improved='Marked')
predNaiveBayes=function(class="Class",dfparam=df, ...){
forecast=list()
argsPred=list(...)
lev=levels(dfparam[,class])
classprob=0
predictedclass=lev[1]
for(i in lev){
p=NaiveBayes_singleClassEllipsis(class,i,dfparam,...)
if(classprob<p){
classprob=p
predictedclass=i
forecast[["Instance"]]=argsPred
forecast[["predicted class"]]=predictedclass
forecast[["probability of predicted class (if independence assumption is true)"]]=classprob
}
}
return(forecast)
}
predNaiveBayes("Treatment",Arthritis, Sex='Female',Improved='Some')
df=weather.nominal
library(nominal.weather)
exp(-3:3)
exp(-3:3)
exp(-3:3)
exp(-3:3)
conditional_prob_bool <- function(varPrior, varPriorLevel, varCondition, varConditionLevel, df){
#Sample call:
##conditional_prob_bool('Class', 'democrat', 'V1', 'y', HouseVotes84)
df$names<-rownames(df)
prior_bool <- df[,varPrior] == varPriorLevel
prior_event <- df[prior_bool,]
condition_bool <- df[,varCondition] == varConditionLevel
condition_event=df[condition_bool,]
return(probAdj(intersect_event(prior_event,condition_event,df),df)/probAdj(condition_event,df))
df=subset(df, select=-c(names))
}
library(mice)
library(mlbench)
library(vcd)
data("Arthritis")
colnames(Arthritis)
intersect_event=function(a,b,df=df){
return(df[intersect(a$names,b$names),])}
union_event=function(E,F){
if(!is.data.frame(E)|!is.data.frame(F)){
stop("arguments must be a dataframe")
}
return(unique(rbind(E,F)))}
multi_union_event=function(E,F,...){return(unique(rbind(E,F,...)))}
complement=function(a,df){
df[!a,]
}
prob<-function( e, s) {
return(nrow(e)/nrow(s))}
probAdj<-function( e, s) {
if (nrow(e)==0){
return(nrow(e)+1/nrow(s))
} else {
return(nrow(e)/nrow(s))}
}
percentSplit=0.7
dfparam=Arthritis
smp_size <- floor(percentSplit * nrow(dfparam))
train_ind <- sample(seq_len(nrow(dfparam)), size = smp_size)
train <- dfparam[train_ind, ]
test <- dfparam[-train_ind, ]
intersect_event<-function(a, b, df){
return(df[intersect(a$names, b$names),])
}
a3 <- array(1:12, dim=c(2,3,2))
a3
a3Dimnames <- list(c("a","b"),c("x","y", "z","w"))
a3 <- array(1:12, dim=c(2, 3, 2), dimnames=a3Dimnames)
a3Dimnames <- list(c("a","b"),c("x","y", "z","w"), c("u","t","s","aa","v"))
a3 <- array(1:12, dim=c(2, 3, 2), dimnames=a3Dimnames)
a3Dimnames <- list(c("a","b"),c("x","y", "z","w"), c("u","t"))
a3 <- array(1:12, dim=c(2, 3, 2), dimnames=a3Dimnames)
a3Dimnames
a3 <- array(1:12, dim=c(2,3,2))
a3
a3Dimnames
a3Dimnames <- list(c("a","b"),c("x","y", "z"), c("u","t"))
a3Dimnames
a3 <- array(1:12, dim=c(2, 3, 2), dimnames=a3Dimnames)
a3
a3
dfparam=train
dim1 <- vector()
dimnames1 <- list()
class <- c("Treatment")
colname - colnames(dfparam)
colname <- colnames(dfparam)
colname - colname[is.element(colname, c(class,"names","ID","Age"))]
colname <- colname[is.element(colname, c(class,"names","ID","Age"))]
for (i in 1:length(colname)) { #Loop through all the input variables and create a matrix of conditional probabilities for each.
dim1 <- vector()
dimnames1 <- list()
dim1 <- length(levels(as.factor(dfparam[, class]))) #at this point, dim1 is a vector with a single element which is the number of levels of the class variable.
dim1 <- append(dim1, length(levels(as.factor(dfparam[, colname[i]]))))
for (i in 1:length(colname)) { #Loop through all the input variables and create a matrix of conditional probabilities for each.
dim1 <- vector()
dimnames1 <- list()
dim1 <- length(levels(as.factor(dfparam[, class]))) #at this point, dim1 is a vector with a single element which is the number of levels of the class variable.
dim1 <- append(dim1, length(levels(as.factor(dfparam[, colname[i]]))))
dimnames1[length(dimnames1) + 1] <- list(c(levels(as.factor(dfparam[, class]))))
dimnames1[length(dimnames1) + 1] <-list(c(levels(as.factor(dfparam[, colname[i]]))))
classnames <- c(levels(as.factor(dfparam[, class])))
varnames <- c(levels(as.factor(dfparam[, colname[i]])))
}
for (i in 1:length(colname)) { #Loop through all the input variables and create a matrix of conditional probabilities for each.
dim1 <- vector()
dimnames1 <- list()
dim1 <- length(levels(as.factor(dfparam[, class]))) #at this point, dim1 is a vector with a single element which is the number of levels of the class variable.
dim1 <- append(dim1, length(levels(as.factor(dfparam[, colname[i]]))))
dimnames1[length(dimnames1) + 1] <- list(c(levels(as.factor(dfparam[, class]))))
dimnames1[length(dimnames1) + 1] <-list(c(levels(as.factor(dfparam[, colname[i]]))))
classnames <- c(levels(as.factor(dfparam[, class])))
varnames <- c(levels(as.factor(dfparam[, colname[i]])))
}
}
for (i in 1:length(colname)) { #Loop through all the input variables and create a matrix of conditional probabilities for each.
dim1 <- vector()
dimnames1 <- list()
dim1 <- length(levels(as.factor(dfparam[, class]))) #at this point, dim1 is a vector with a single element which is the number of levels of the class variable.
dim1 <- append(dim1, length(levels(as.factor(dfparam[, colname[i]]))))
dimnames1[length(dimnames1) + 1] <- list(c(levels(as.factor(dfparam[, class]))))
dimnames1[length(dimnames1) + 1] <-list(c(levels(as.factor(dfparam[, colname[i]]))))
classnames <- c(levels(as.factor(dfparam[, class])))
varnames <- c(levels(as.factor(dfparam[, colname[i]])))
}
x <- array(0, dim = c(dim1), dimnames = dimnames1)
x
df
dfparam
dfparam
dfparam
