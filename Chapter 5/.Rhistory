data("HouseVotes84")
library(mlbench)
data("HouseVotes84")
table(HouseVotes84[,1])
table(HouseVotes84[,1:2])
table(HouseVotes84)
table(HouseVotes84[,1])
table(HouseVotes84[,1:2])
table(HouseVotes84[,1:4])
table(HouseVotes84[,1:2])
table(HouseVotes84[,1])
table(HouseVotes84[,1:2])/sum(table(HouseVotes84[,1:2]))
table(HouseVotes84[,1],HouseVotes84[,1])
colnames(mtcars)
data(mtcars)
View(head(mtcars))
table(mtcars[,1])
table(mtcars[,2])
str(HouseVotes84)
NaiveRule<-function(output="Class" ,df=df){
#Replace “class” with the name of the class variable.
classTable=table(df$Class)
return(names(classTable[which.max(classTable)]))
}
Naivetry<-function(output ,df){
#Replace “class” with the name of the class variable.
classTable=table(df$Class)
return(names(classTable[which.max(classTable)]))
}
Naivetry(Class,HouseVotes84)
NaiveRule(Class,HouseVotes84)
NaiveRule<-function(output="Class" ,df=df){
if (is.data.frame(df)){
classTable=table(df$Class)
return(names(classTable[which.max(classTable)]))
}
else {stop()}
}
a <- xts()
a <- 1
NaiveRule(Class, HouseVotes84)
NaiveRule(Class, a)
a <- data.frame(fruit=NA, cost=NA, quantity=NA)[numeric(0), ]
NaiveRule(Class, a)
a <- data.frame(fruit=1, cost=NA, quantity=NA)[numeric(0), ]
NaiveRule(Class, a)
NaiveRule(Class, a)
df <- HouseVotes84
df[1]
df(class)
View(df)
df$Class
for (i in HouseVotes84$Class)
if i == "democrat" {
d = d + 1
}else {
r = r + 1
}
if d > r {
return("democrat")
}else { return("republican")}
print(i)
for (i in df$Class){
print(i)
}
for (i in df$Class){
d <- 0
r <- 0
if i == "democrat" {
d <- d + 1
} else { r <- r + 1}
}
print(r, d)
d <- 0
r <- 0
for (i in df$Class){
if i == "democrat" {
d <- d + 1
} else { r <- r + 1}
}
print(r, d)
d <- 0
r <- 0
for (i in df$Class){
if i == "democrat" {
d <- d + 1
} else { r <- r + 1}
}
print(r, d)
d <- 0
r <- 0
for (i in df$Class){
if i == "democrat" {
d <- d + 1
} else { r <- r + 1}
}
print(r, d)
a < "d"
if a == "d" {print(1)}
if (a == "d") {print(1)}
a < "d"
if (a == "d") {print(1)}
a < "d"
d < "d"
d <- 0
x < "d"
x <- "d"
if (x == "d") {print(1)}
d <- 0
r <- 0
for (i in df$Class){
if (i == "democrat") {
d <- d + 1
} else { r <- r + 1}
}
print(r, d)
print(r)
print(d)
print(which.max(r,d))
print(which.max(c(r,d)
d <- 0
r <- 0
for (i in df$Class){
if (i == "democrat") {
d <- d + 1
} else { r <- r + 1}
}
if (d > r){
print("democrat")
}else {print("republican")}
Naivetry <- function(output = "Class", df){
d <- 0
r <- 0
for (i in df$Class){
if (i == "democrat") {
d <- d + 1
} else { r <- r + 1}
}
if (d > r){
print("democrat")
}else {print("republican")}
}
Naivetry(Class, df)
start_time <- Sys.time()
start_time <- Sys.time()
Naivetry(Class, df)
end_time <- Sys.time()
end_time - start_time
start_time <- Sys.time()
NaiveRule(Class, df)
end_time <- Sys.time()
end_time - start_time
