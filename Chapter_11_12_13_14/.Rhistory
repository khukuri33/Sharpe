sigmoid <- function(z) {
return(1/(1+exp(-z)))
}
sigmoidPrime<-function(z){
return(exp(-z)/(1+exp(-z))^2)
}
Z2=XValue%*%W1Value
A2=sigmoid(Z2)
z3=A2%*%W2Value
z3=as.vector(z3)
yhat=sigmoid(z3)
J=0.5*(yValue-yhat)^2
print("the current cost is")
print(J)
delta3=(yValue-yhat)*(-sigmoidPrime(z3))
dJ_dW2=delta3*t(A2)
delta2 = (delta3* t(W2Value)) * sigmoidPrime(Z2)
dJ_dW1= t(XValue) %*%Delta2
W2=W2Value-r*dJ_dW2
W1=W1Value-r*dJ_dW1
Z2=XValue%*%W1
A2=sigmoid(Z2)
Z3=A2%*%W2 #We use uppercase “Z” because this is a (1 × 1) matrix.
z3=as.vector(Z3)
yhat=sigmoid(z3)
print(paste0("target value y : ",yValue))
print(paste0("predicted value: ",yhat))
returnedList=list(W1,W2)
returnedList<-setNames(returnedList, c("W1","W2"))
return(returnedList)
}
weightsList=updateWeights()
updateWeights<-function(XValue=X,W1Value=W1,W2Value=W2,yValue=y,r=2){
#Sample call:
#weightsList=updateWeights(X,W1,W2,3,4) #The parameters are specified.
sigmoid <- function(z) {
return(1/(1+exp(-z)))
}
sigmoidPrime<-function(z){
return(exp(-z)/(1+exp(-z))^2)
}
Z2=XValue%*%W1Value
A2=sigmoid(Z2)
z3=A2%*%W2Value
z3=as.vector(z3)
yhat=sigmoid(z3)
J=0.5*(yValue-yhat)^2
print("the current cost is")
print(J)
delta3=(yValue-yhat)*(-sigmoidPrime(z3))
dJ_dW2=delta3*t(A2)
delta2 = (delta3* t(W2Value)) * sigmoidPrime(Z2)
dJ_dW1= t(XValue) %*%delta2
W2=W2Value-r*dJ_dW2
W1=W1Value-r*dJ_dW1
Z2=XValue%*%W1
A2=sigmoid(Z2)
Z3=A2%*%W2 #We use uppercase “Z” because this is a (1 × 1) matrix.
z3=as.vector(Z3)
yhat=sigmoid(z3)
print(paste0("target value y : ",yValue))
print(paste0("predicted value: ",yhat))
returnedList=list(W1,W2)
returnedList<-setNames(returnedList, c("W1","W2"))
return(returnedList)
}
weightsList=updateWeights()
weightsList=updateWeights()
weightsList=updateWeights()
normal.5 <- function(x){
xNew <- ((x-min(x))/(max(x)-min(x)))-.5
return(xNew)
}
install.packages(plotly)
install.packages(reshape2)
library(plotly)
install.packages(plotly)
install.packages("plotly")
install.packages("reshape2")
library(plotly)
library(reshape2)
mooddf <- read.csv("exercise_mood.csv")
mooddf <- read.csv("25.csv")
mooddf<-mooddf[complete.cases(mooddf),]
my_df=mooddf
hours_of_sleep=my_df$hours_of_sleep
calories_burned=my_df$calories_burned
mood=my_df$mood
hours_of_sleep=normal.5(hours_of_sleep)
calories_burned=normal.5(calories_burned)
bool_of_active=my_df$bool_of_active
active_factor=factor(bool_of_active,labels = c("inactive", "active"))
my_df=as.data.frame(cbind(hours_of_sleep,calories_burned,mood, active_factor))
View(my_df)
mooddf_plot <- plot_ly(my_df,
x = hours_of_sleep,
y = calories_burned,
z = mood,
type = "scatter3d",
mode = "markers")
mood_lm <- lm(mood ~ hours_of_sleep + calories_burned,
data = my_df)
graph_reso <- 0.05
axis_x <- seq(min(my_df$hours_of_sleep), max(my_df$hours_of_sleep),
by = graph_reso)
axis_y <- seq(min(my_df$calories_burned), max(my_df$calories_burned),
by = graph_reso)
mood_lm_surface <- expand.grid(hours_of_sleep = axis_x,calories_burned =
axis_y,KEEP.OUT.ATTRS = F)
mood_lm_surface$mood <- predict.lm(mood_lm, newdata = mood_lm_surface)
mood_lm_surface <- acast(mood_lm_surface, hours_of_sleep ~ calories_burned, value.var = "mood")
mood_plot <- plot_ly(my_df,
x = ~hours_of_sleep, y = ~calories_burned, z = ~mood,text = "active/inactive", type = "scatter3d", mode = "markers",marker = list(color = hcolors))
mood_plot <- plot_ly(my_df, x = ~hours_of_sleep, y = ~calories_burned, z = ~mood, text = "active/inactive", type = "scatter3d",mode = "markers",marker = list(color = hcolors))
hcolors=c("blue","orange")[active_factor]
mood_plot <- plot_ly(my_df, x = ~hours_of_sleep, y = ~calories_burned, z = ~mood, text = "active/inactive", type = "scatter3d",mode = "markers",marker = list(color = hcolors))
mood_plot <- add_trace(p = mood_plot,z = mood_lm_surface,x = axis_x,y = axis_y,type = "surface")
mood_plot
mood_lm
mood_plot
mood_lm
summary(mood_lm)
inputLayerSize=2
hiddenLayerSize=3
outputLayerSize=1
set.seed(3)
W1=matrix(runif(inputLayerSize*hiddenLayerSize,-1,1),inputLayerSize,hiddenLayerSize)
W2=matrix(runif(hiddenLayerSize*outputLayerSize,-1,1),hiddenLayerSize,outputLayerSize)
normal.5 <- function(x){
normal.5 <- function(x){}
normal.5 <- function(x){
xNew <- ((x-min(x))/(max(x)-min(x)))-.5
return(xNew)}
}
normal.5 <- function(x){
xNew <- ((x-min(x))/(max(x)-min(x)))-.5
return(xNew)
}
mood <- read.csv("25.csv")
mood<-mood[complete.cases(mood),]
colnames(mood)
mood=mood[,c("mood","calories_burned","hours_of_sleep")]
smp_size <- floor(0.75 * nrow(mood))
set.seed(123)
train_ind <- sample(seq_len(nrow(mood)), size = smp_size)
train <- mood[train_ind, ]
test <- mood[-train_ind, ]
colnames(mood)
moodInputs=train[,c("calories_burned","hours_of_sleep")]
moodInputs=normal.5(moodInputs)
moodOutput=train[,"mood"]
moodOutput=normal.5(moodOutput)
countS=0
fullUpdateWeights<-function(inputX=moodInputs,outputY=moodOutput, W1Val= W1,W2Val=W2){
#sample call:
#fullUpdateWeights(inputX=moodInputs,outputY=moodOutput,W1,W2)
weights=list(W1Val,W2Val)
sigmoid <- function(z) {
return(1/(1+exp(-z)))
}
sigmoidPrime<-function(z){
return(exp(-z)/(1+exp(-z))^2)
}
for (predictor in rownames(inputX)){
predictorMat=unlist(inputX[predictor,])
predictorMat=matrix(predictorMat,1,2)
countS=countS+1
outputY= unlist(outputY)
currentMoodOutput=outputY[countS]
weightsList=updateWeights(predictorMat,weights[[1]],weights[[2]], yValue=currentMoodOutput,.2)
weights=list(weightsList[[1]],weightsList[[2]])
if(countS==nrow(inputX)){#this will be used in the next section called Repeated Training: Epochs.
countS0 =
}
}
#We have iterated through the entire data set and with each iteration we updated the weights. Next we measure the cost.
print(weights)
inputsMat=as.matrix(moodInputs)
y=as.matrix(moodOutput,ncol=1)
Z2=rowSums(inputsMat%*%weights[[1]])
A2=sigmoid(Z2)
Z3=rowSums(A2%*%t(weights[[2]]))
yHat=sigmoid(Z3)
#We want to sum up all the
J=(1/nrow(inputsMat))*(0.5*sum((y-yHat)^2))
print("the cost, J, for this epoch is")
print(J)
returnedList<-setNames(weights, c("W1","W2"))
return(returnedList)
# end of fullUpdareWeights
}
fullUpdateWeights<-function(inputX=moodInputs,outputY=moodOutput, W1Val= W1,W2Val=W2){
#sample call:
#fullUpdateWeights(inputX=moodInputs,outputY=moodOutput,W1,W2)
weights=list(W1Val,W2Val)
sigmoid <- function(z) {
return(1/(1+exp(-z)))
}
sigmoidPrime<-function(z){
return(exp(-z)/(1+exp(-z))^2)
}
for (predictor in rownames(inputX)){
predictorMat=unlist(inputX[predictor,])
predictorMat=matrix(predictorMat,1,2)
countS=countS+1
outputY= unlist(outputY)
currentMoodOutput=outputY[countS]
weightsList=updateWeights(predictorMat,weights[[1]],weights[[2]], yValue=currentMoodOutput,.2)
weights=list(weightsList[[1]],weightsList[[2]])
if(countS==nrow(inputX)){#this will be used in the next section called Repeated Training: Epochs.
countS0 =
}
}
#We have iterated through the entire data set and with each iteration we updated the weights. Next we measure the cost.
print(weights)
inputsMat=as.matrix(moodInputs)
y=as.matrix(moodOutput,ncol=1)
Z2=rowSums(inputsMat%*%weights[[1]])
A2=sigmoid(Z2)
Z3=rowSums(A2%*%t(weights[[2]]))
yHat=sigmoid(Z3)
#We want to sum up all the
J=(1/nrow(inputsMat))*(0.5*sum((y-yHat)^2))
print("the cost, J, for this epoch is")
print(J)
returnedList<-setNames(weights, c("W1","W2"))
return(returnedList)
# end of fullUpdareWeights
}
View(moodInputs)
View(moodOutput)
View(moodInputs)
mood <- read.csv("25.csv")
mood<-mood[complete.cases(mood),]
colnames(mood)
mood=mood[,c("mood","calories_burned","hours_of_sleep")]
smp_size <- floor(0.75 * nrow(mood))
set.seed(123)
train_ind <- sample(seq_len(nrow(mood)), size = smp_size)
train <- mood[train_ind, ]
test <- mood[-train_ind, ]
colnames(mood)
moodInputs=train[,c("calories_burned","hours_of_sleep")]
moodInputs=normal.5(moodInputs)
moodOutput=train[,"mood"]
moodOutput=normal.5(moodOutput)
countS=0
View(moodOutput)
View(moodInputs)
fullUpdateWeights<-function(inputX=moodInputs,outputY=moodOutput, W1Val= W1,W2Val=W2){
#sample call:
#fullUpdateWeights(inputX=moodInputs,outputY=moodOutput,W1,W2)
weights=list(W1Val,W2Val)
sigmoid <- function(z) {
return(1/(1+exp(-z)))
}
sigmoidPrime<-function(z){
return(exp(-z)/(1+exp(-z))^2)
}
for (predictor in rownames(inputX)){
predictorMat=unlist(inputX[predictor,])
predictorMat=matrix(predictorMat,1,2)
countS=countS+1
outputY= unlist(outputY)
currentMoodOutput=outputY[countS]
weightsList=updateWeights(predictorMat,weights[[1]],weights[[2]], yValue=currentMoodOutput,.2)
weights=list(weightsList[[1]],weightsList[[2]])
if(countS==nrow(inputX)){#this will be used in the next section called Repeated Training: Epochs.
countS0 =
}
}
#We have iterated through the entire data set and with each iteration we updated the weights. Next we measure the cost.
print(weights)
inputsMat=as.matrix(moodInputs)
y=as.matrix(moodOutput,ncol=1)
Z2=rowSums(inputsMat%*%weights[[1]])
A2=sigmoid(Z2)
Z3=rowSums(A2%*%t(weights[[2]]))
yHat=sigmoid(Z3)
#We want to sum up all the
J=(1/nrow(inputsMat))*(0.5*sum((y-yHat)^2))
print("the cost, J, for this epoch is")
print(J)
returnedList<-setNames(weights, c("W1","W2"))
return(returnedList)
# end of fullUpdareWeights
}
fullUpdateWeights<-function(inputX=moodInputs,outputY=moodOutput, W1Val= W1,W2Val=W2){
#sample call:
#fullUpdateWeights(inputX=moodInputs,outputY=moodOutput,W1,W2)
weights=list(W1Val,W2Val)
sigmoid <- function(z) {
return(1/(1+exp(-z)))
}
sigmoidPrime<-function(z){
return(exp(-z)/(1+exp(-z))^2)
}
for (predictor in rownames(inputX)){
predictorMat=unlist(inputX[predictor,])
predictorMat=matrix(predictorMat,1,2)
countS=countS+1
outputY= unlist(outputY)
currentMoodOutput=outputY[countS]
weightsList=updateWeights(predictorMat,weights[[1]],weights[[2]], yValue=currentMoodOutput,.2)
weights=list(weightsList[[1]],weightsList[[2]])
if(countS==nrow(inputX)){#this will be used in the next section called Repeated Training: Epochs.
countS0 =
}
}
#We have iterated through the entire data set and with each iteration we updated the weights. Next we measure the cost.
print(weights)
inputsMat=as.matrix(moodInputs)
y=as.matrix(moodOutput,ncol=1)
Z2=rowSums(inputsMat%*%weights[[1]])
A2=sigmoid(Z2)
Z3=rowSums(A2%*%t(weights[[2]]))
yHat=sigmoid(Z3)
#We want to sum up all the
J=(1/nrow(inputsMat))*(0.5*sum((y-yHat)^2))
print("the cost, J, for this epoch is")
print(J)
returnedList<-setNames(weights, c("W1","W2"))
return(returnedList)
# end of fullUpdareWeights
}
fullUpdateWeights<-function(inputX=moodInputs,outputY=moodOutput, W1Val= W1,W2Val=W2){
#sample call:
#fullUpdateWeights(inputX=moodInputs,outputY=moodOutput,W1,W2)
weights=list(W1Val,W2Val)
sigmoid <- function(z) {
return(1/(1+exp(-z)))
}
sigmoidPrime<-function(z){
return(exp(-z)/(1+exp(-z))^2)
}
for (predictor in rownames(inputX)){
predictorMat=unlist(inputX[predictor,])
predictorMat=matrix(predictorMat,1,2)
countS=countS+1
outputY= unlist(outputY)
currentMoodOutput=outputY[countS]
weightsList=updateWeights(predictorMat,weights[[1]],weights[[2]], yValue=currentMoodOutput,.2)
weights=list(weightsList[[1]],weightsList[[2]])
if(countS==nrow(inputX)){#this will be used in the next section called Repeated Training: Epochs.
countS0 =
}
}
#We have iterated through the entire data set and with each iteration we updated the weights. Next we measure the cost.
print(weights)
inputsMat=as.matrix(moodInputs)
y=as.matrix(moodOutput,ncol=1)
Z2=rowSums(inputsMat%*%weights[[1]])
A2=sigmoid(Z2)
Z3=rowSums(A2%*%t(weights[[2]]))
yHat=sigmoid(Z3)
#We want to sum up all the
J=(1/nrow(inputsMat))*(0.5*sum((y-yHat)^2))
print("the cost, J, for this epoch is")
print(J)
returnedList<-setNames(weights, c("W1","W2"))
return(returnedList)
# end of fullUpdareWeights
}
fullUpdateWeights<-function(inputX=moodInputs,outputY=moodOutput, W1Val= W1,W2Val=W2){
#sample call:
#fullUpdateWeights(inputX=moodInputs,outputY=moodOutput,W1,W2)
weights=list(W1Val,W2Val)
sigmoid <- function(z) {
return(1/(1+exp(-z)))
}
sigmoidPrime<-function(z){
return(exp(-z)/(1+exp(-z))^2)
}
for (predictor in rownames(inputX)){
predictorMat=unlist(inputX[predictor,])
predictorMat=matrix(predictorMat,1,2)
countS=countS+1
outputY= unlist(outputY)
currentMoodOutput=outputY[countS]
weightsList=updateWeights(predictorMat,weights[[1]],weights[[2]], yValue=currentMoodOutput,.2)
weights=list(weightsList[[1]],weightsList[[2]])
if(countS==nrow(inputX)){#this will be used in the next section called Repeated Training: Epochs.
countS0 = 0
}
}
#We have iterated through the entire data set and with each iteration we updated the weights. Next we measure the cost.
print(weights)
inputsMat=as.matrix(moodInputs)
y=as.matrix(moodOutput,ncol=1)
Z2=rowSums(inputsMat%*%weights[[1]])
A2=sigmoid(Z2)
Z3=rowSums(A2%*%t(weights[[2]]))
yHat=sigmoid(Z3)
#We want to sum up all the
J=(1/nrow(inputsMat))*(0.5*sum((y-yHat)^2))
print("the cost, J, for this epoch is")
print(J)
returnedList<-setNames(weights, c("W1","W2"))
return(returnedList)
# end of fullUpdareWeights
}
fullUpdateWeights(inputX=moodInputs,outputY=moodOutput,W1,W2)
JCost<-function(moodInputsVal=moodInputs,moodOutputVal=moodOutput, W1Val=W1,W2Val=W2) {
inputsMat=as.matrix(moodInputsVal)
y=as.matrix(moodOutputVal,ncol=1)
Z2=rowSums(inputsMat%*%W1Val)
A2=sigmoid(Z2)
Z3=rowSums(A2%*%t(W2Val))
yHat=sigmoid(Z3)
J=(1/nrow(inputsMat))*(0.5*sum((y-yHat)^2))
print("the cost, J, for this epoch is")
print(J)
}
fullUpdateWeights(inputX=moodInputs,outputY=moodOutput,W1,W2)
weightsList=fullUpdateWeights(inputX=moodInputs,outputY=moodOutput, W1,W2)
weightsList=fullUpdateWeights(inputX=moodInputs,outputY=moodOutput,W1,W2)
weightsList=fullUpdateWeights(inputX=moodInputs,outputY=moodOutput,W1,W2)
weightsList=fullUpdateWeights(inputX=moodInputs,outputY=moodOutput,W1,W2)
W1=weightsList[["W1"]]
W2=weightsList[["W2"]]
weightsList=fullUpdateWeights(inputX=moodInputs,outputY=moodOutput,W1,W2)
W1=weightsList[["W1"]]
W2=weightsList[["W2"]]
weightsList=fullUpdateWeights(inputX=moodInputs,outputY=moodOutput,W1,W2)
moodInputs=test[,c("calories_burned","hours_of_sleep")]
moodInputs=normal.5(moodInputs)
moodOutput=test[,"mood"]
moodOutput=unlist(moodOutput)
moodOutput=normal.5(moodOutput)
countS=0
JCost(moodInputs,moodOutput,W1,W2)
globalJ <<- J
J=0.5*(yValue-yhat)^2
W1=matrix(runif(inputLayerSize*hiddenLayerSize,-1,1),inputLayerSize,hiddenLayerSize)
W2=matrix(runif(hiddenLayerSize*outputLayerSize,-1,1),hiddenLayerSize, outputLayerSize)
predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2,epochs=5, rValue=.1)
predNNEpoch <- function(inputX=moodInputs,outputY=moodOutputs,W1Value,W2Value,epochs=n,rValue=1){
#Sample call:
#predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2, epochs=5,rValue=.1)
for(k in 1:epochs){
weightsList <<- fullUpdateWeights(inputX,outputY,W1Value,W2Value,rValue=1)
W1Value <- weightsList[["W1"]]
W2Value <- weightsList[["W2"]]
print(paste0("Epoch number: ", k, " globalJ: ", globalJ))
}
}
W1=matrix(runif(inputLayerSize*hiddenLayerSize,-1,1),inputLayerSize,hiddenLayerSize)
W2=matrix(runif(hiddenLayerSize*outputLayerSize,-1,1),hiddenLayerSize, outputLayerSize)
predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2,epochs=5, rValue=.1)
predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2,epochs=5, rValue=1)
predNNEpoch <- function(inputX=moodInputs,outputY=moodOutputs,W1Value,W2Value,epochs=n,rValue=1){
#Sample call:
#predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2, epochs=5,rValue=.1)
for(k in 1:epochs){
weightsList <<- fullUpdateWeights(inputX,outputY,W1Value,W2Value,rValue)
W1Value <- weightsList[["W1"]]
W2Value <- weightsList[["W2"]]
print(paste0("Epoch number: ", k, " globalJ: ", globalJ))
}
}
predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2,epochs=5, rValue=1)
predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2,epochs=5, rValue=.1)
predNNEpoch <- function(inputX=moodInputs,outputY=moodOutputs,W1Value,W2Value,epochs=n,rValue = 1){
#Sample call:
#predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2, epochs=5,rValue=.1)
for(k in 1:epochs){
weightsList <<- fullUpdateWeights(inputX,outputY,W1Value,W2Value)
W1Value <- weightsList[["W1"]]
W2Value <- weightsList[["W2"]]
print(paste0("Epoch number: ", k, " globalJ: ", globalJ))
}
}
predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2,epochs=5, rValue=.1)
predNNEpoch <- function(inputX=moodInputs,outputY=moodOutputs,W1Value,W2Value,epochs=n,rValue = 1){
#Sample call:
#predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2, epochs=5,rValue=.1)
for(k in 1:epochs){
weightsList <<- fullUpdateWeights(inputX,outputY,W1Value,W2Value,rValue)
W1Value <- weightsList[["W1"]]
W2Value <- weightsList[["W2"]]
print(paste0("Epoch number: ", k, " globalJ: ", globalJ))
}
}
predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2,epochs=5, rValue=.1)
predNNEpoch <- function(inputX=moodInputs,outputY=moodOutputs,W1Value,W2Value,epochs=n){
#Sample call:
#predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2, epochs=5,rValue=.1)
for(k in 1:epochs){
weightsList <<- fullUpdateWeights(inputX,outputY,W1Value,W2Value)
W1Value <- weightsList[["W1"]]
W2Value <- weightsList[["W2"]]
print(paste0("Epoch number: ", k, " globalJ: ", globalJ))
}
}
W1=matrix(runif(inputLayerSize*hiddenLayerSize,-1,1),inputLayerSize,hiddenLayerSize)
W2=matrix(runif(hiddenLayerSize*outputLayerSize,-1,1),hiddenLayerSize, outputLayerSize)
predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2,epochs=5, rValue=.1)
predNNEpoch(inputX=moodinputs,outputY=moodOutput,W1Value=W1,W2Value=W2,epochs=5)
predNNEpoch(inputX=moodInputs,outputY=moodOutput,W1Value=W1,W2Value=W2,epochs=5)
#chapter 12
JohnSmith=Student(“mathematics, 178845, 3.8, “John Smith”)
#chapter 12
JohnSmith<-Student(“mathematics, 178845, 3.8, “John Smith”)
#chapter 12
JohnSmith<-Student(“mathematics, 178845, 3.8, “John Smith”)
#chapter 12
JohnSmith=Student(“mathematics"", 178845, 3.8, “John Smith”)
#chapter 12
JohnSmith=Student(“mathematics", 178845, 3.8, “John Smith”)
#chapter 12
NaomiOsaka=Student(“physics”, 178558, 3.9, “Naomi Osaka”)
mean(mtcars$mpg)
