currentPrice=outputY[count]
weightsList=updateWeights(input,weights[1],weights[2],
currentPrice, learnR)
weights=c(weightsList[[1]],weightsList[[2]])
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
price
price=train[price]
view(train)
points
wine_updated <- wine[wine_up_bool,]
wine_updated
view(wine_updated)
req_colmns <- c("price", "points")
wine_updated <- wine_updated[,req_colmns]
view(wine_updated)
smp_size <- floor(0.75 * nrow(wine_updated))
set.seed(123)
train_ind <- sample(seq_len(nrow(wine_updated)), size = smp_size)
view(train)
train_ind <- sample(seq_len(nrow(wine_updated)), size = smp_size)
view(train)
nrow(wine_updated)
train_ind <- sample(seq_len(nrow(wine_updated)), size = smp_size)
view(train)
train <- wine_updated[train_ind, ]
test <- wine_updated[-train_ind, ]
view(train)
points= train$points
points=normal.5(points)
price= train$price
price=normal.5(price)
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
predNNSingleValue<-function(inputX=points, outputY=price, xValue=.90,
learnR=1){
#Sample call: predNNSingle(inputX=points,outputY=price,xValue=.90,  learnR=1)
count=0
weights= runif(2,-1,1)
for (input in inputX){
count=count+1
currentPrice=outputY[count]
weightsList=updateWeights(input,weights[1],weights[2],currentPrice, learnR)
weights=c(weightsList[[1]],weightsList[[2]])
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
predNNSingleValue<-function(inputX=points, outputY=price, xValue=.90,
learnR=1){
#Sample call: predNNSingle(inputX=points,outputY=price,xValue=.90,  learnR=1)
count=0
weights= runif(2,-1,1)
for (input in inputX){
count=count+1
currentPrice=outputY[count]
weightsList=updateWeights(input, weights[1],weights[2],currentPrice, learnR)
weights=c(weightsList[[1]],weightsList[[2]])
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count, weights))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
print(weights)
predNNSingleValue<-function(inputX=points, outputY=price, xValue=.90,
learnR=1){
#Sample call: predNNSingle(inputX=points,outputY=price,xValue=.90,  learnR=1)
count=0
weights= runif(2,-1,1)
print(weights)
for (input in inputX){
count=count+1
currentPrice=outputY[count]
weightsList=updateWeights(input, weights[1],weights[2],currentPrice, learnR)
weights=c(weightsList[[1]],weightsList[[2]])
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count, weights))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
predNNSingleValue<-function(inputX=points, outputY=price, xValue=.90,
learnR=1){
#Sample call: predNNSingle(inputX=points,outputY=price,xValue=.90,  learnR=1)
count=0
weights= runif(2,-1,1)
for (input in inputX){
count=count+1
currentPrice=outputY[count]
weightsList=updateWeights(input, weights[1],weights[2],currentPrice, learnR)
weights=c(weightsList[[1]],weightsList[[2]])
print(weights)
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count, weights))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
predNNSingleValue<-function(inputX=points, outputY=price, xValue=.90,
learnR=1){
#Sample call: predNNSingle(inputX=points,outputY=price,xValue=.90,  learnR=1)
count=0
weights= runif(2,-1,1)
for (input in inputX){
count=count+1
currentPrice=outputY[count]
weightsList=updateWeights(input, weights[1],weights[2],currentPrice, learnR)
weights=c(weightsList[[1]],weightsList[[2]])
print(weightsList)
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count, weights))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
updateWeights<-function(xValue="x",w1Value="w1",w2Value="w2",yValue= "y",r=2){
z2=xValue*w1Value
a2=sigmoid(z2)
z3=a2*w2Value
yhat=sigmoid(z3)
delta3=(yValue-yhat)*(-sigmoidPrime(z3))
dJ_dw2=delta3*a2
delta2=delta3*w2Value*sigmoidPrime(z2)
dJ_dw1=delta2*xValue
w2Value =w2Value-r*dJ_dw2
w1Value =w1Value-r*dJ_dw1
returnedList=list(w1Value,w2Value)
returnedList<-setNames(returnedList, c("w1","w2"))
return(returnedList)
}
weightsList=updateWeights(.5,weights[1],weights[2], .6,.2)
is(weightsList[[1]])
predNNSingleValue<-function(inputX=points, outputY=price, xValue=.90,
learnR=1){
#Sample call: predNNSingle(inputX=points,outputY=price,xValue=.90,  learnR=1)
count=0
weights= runif(2,-1,1)
for (input in inputX){
count=count+1
currentPrice=outputY[count]
weightsList = updateWeights(input, weights[1],weights[2],currentPrice, learnR)
weights=c(weightsList[[1]],weightsList[[2]])
print(weightsList)
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count, weights))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
predNNSingleValue<-function(inputX=points, outputY=price, xValue=.90,learnR=1){
#Sample call: predNNSingle(inputX=points,outputY=price,xValue=.90,  learnR=1)
count=0
weights= runif(2,-1,1)
for (input in inputX){
count=count+1
currentPrice=outputY[count]
weightsList = updateWeights(input, weights[1],weights[2], currentPrice , learnR)
weights=c(weightsList[[1]],weightsList[[2]])
print(weightsList)
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count, weights))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
points
predNNSingleValue<-function(inputX=points, outputY=price, xValue=.90,learnR=1){
#Sample call: predNNSingle(inputX=points,outputY=price,xValue=.90,  learnR=1)
count=0
weights= runif(2,-1,1)
for (input in inputX){
count=count+1
currentPrice=outputY[count]
weightsList = updateWeights(input, weights[1],weights[2], currentPrice , learnR)
print(input)
weights=c(weightsList[[1]],weightsList[[2]])
print(weightsList)
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count, weights))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
predNNSingleValue<-function(inputX=points, outputY=price, xValue=.90,learnR=1){
#Sample call: predNNSingle(inputX=points,outputY=price,xValue=.90,  learnR=1)
count=0
weights= runif(2,-1,1)
for (input in inputX){
count=count+1
currentPrice=outputY[count]
weightsList = updateWeights(input, weights[1],weights[2], currentPrice , learnR)
weights[1]
weights=c(weightsList[[1]],weightsList[[2]])
print(weightsList)
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count, weights))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
predNNSingleValue<-function(inputX=points, outputY=price, xValue=.90,learnR=1){
#Sample call: predNNSingle(inputX=points,outputY=price,xValue=.90,  learnR=1)
count=0
weights= runif(2,-1,1)
for (input in inputX){
count=count+1
currentPrice=outputY[count]
weightsList = updateWeights(input, weights[1],weights[2], currentPrice , learnR)
weights[1]
weights=c(weightsList[[1]],weightsList[[2]])
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count, weights))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
predNNSingleValue<-function(inputX=points, outputY=price, xValue=.90,learnR=1){
#Sample call: predNNSingle(inputX=points,outputY=price,xValue=.90,  learnR=1)
count=0
weights= runif(2,-1,1)
for (input in inputX){
count=count+1
currentPrice=outputY[count]
weightsList = updateWeights(input, weights[1],weights[2], currentPrice , learnR)
weights[1]
weights=c(weightsList[[1]],weightsList[[2]])
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count, weights))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
updateWeights(points[1],x1,x2,price[1], 1)
points[1]
price[1]
price
price= train$price
price
updateWeights(points[1],x1,x2,price[1], 1)
predNNSingleValue<-function(inputX=points, outputY=price, xValue=.90,learnR=1){
#Sample call: predNNSingle(inputX=points,outputY=price,xValue=.90,  learnR=1)
count=0
weights= runif(2,-1,1)
for (input in inputX){
count=count+1
currentPrice=outputY[count]
weightsList = updateWeights(input, weights[1],weights[2], currentPrice , learnR)
weights[1]
weights=c(weightsList[[1]],weightsList[[2]])
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count, weights))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
price
price=normal.5(price)
price
price= train$price
price
library(tidyverse)
sigmoid <- function(z) {return(1/(1+exp(-z)))}
sigmoidPrime<-function(z){
return(exp(-z)/(1+exp(-z))^2)
}
x=0.2
w1=0.3
w2=0.4
y=0.5
#Calculate yhat.
z2=x*w1
a2=sigmoid(z2)
z3=a2*w2
yhat=sigmoid(z3)
yhat
J=0.5*(y-yhat)^2
J
jCostScalar=function(xValue=x,w1Value=w1,w2Value=w2,yValue=y){
#sample call: jCostScalar(x,w1,w2,y)
z2=xValue*w1Value
a2=sigmoid(z2)
z3=a2*w2Value
yhat=sigmoid(z3)
J=0.5*(yValue-yhat)^2
return(J)
}
jCostScalar(x,w1,w2,y)
x1=0.2
x2=0.15
X=c(x1,x2)
w11=0.3
w12=0.25
W1=c(w11,w12)
sum(X*W1)
X=matrix(X,1,2)
W1=matrix(W1,2,1)
w2=0.4
y=0.5
inputLayerSize=2
hiddenLayerSize=1 #We won’t use this yet.
outputLayerSize=1 #We won’t use this yet.
X=matrix(X,1,inputLayerSize)
W1=matrix(W1, inputLayerSize,1)
z2=X%*%W1
a2=sigmoid(z2)
z3=a2*w2
yhat=sigmoid(z3)
J=0.5*(y-yhat)^2
J
jCost2Inputs=function(xValue=X,w1Value=W1,w2Value=w2,yValue=y){
#jCost2Inputs(X,W1,w2,y)
z2=xValue%*%w1Value
a2=sigmoid(z2)
z3=a2*w2Value
yhat=sigmoid(z3)
J=0.5*(yValue-yhat)^2
return(J)
}
jCost2Inputs()
runif(6,-1,1)
inputLayerSize=2
hiddenLayerSize=3
outputLayerSize=1
set.seed(3)
W1<<-matrix(runif(inputLayerSize*hiddenLayerSize,-1,1),inputLayerSize,hiddenLayerSize)
x1=0.2
x2=0.15
X=c(x1,x2)
X=matrix(X,1,2)
#So far, all we have done is the calculation of Z2.
Z2=X%*%W1
Z2
A2=sigmoid(Z2)
A2
}
W2<-matrix(runif(hidW2<-matrix(runif(hiddenLayerSize*outputLayerSize,-1,1),hiddenLayerSize,outputLayerSize)
}
hiddenLayerSize
outputLayerSize
W2 <- matrix(runif(hiddenLayerSize*outputLayerSize,-1,1),hiddenLayerSize,outputLayerSize)
W2
Z3=A2%*%W2
Z3
updateWeightstry<-function(xValue="x",w1Value="w1",w2Value="w2",yValue= "y",r=2){
z2=xValue*w1Value
a2=sigmoid(z2)
z3=a2*w2Value
yhat=sigmoid(z3)
delta3=(yValue-yhat)*(-sigmoidPrime(z3))
dJ_dw2=delta3*a2
delta2=delta3*w2Value*sigmoidPrime(z2)
dJ_dw1=delta2*xValue
w2Value =w2Value/r*dJ_dw2
w1Value =w1Value/r*dJ_dw1
returnedList=list(w1Value,w2Value)
returnedList<-setNames(returnedList, c("w1","w2"))
return(returnedList)
}
updateWeights<-function(xValue="x",w1Value="w1",w2Value="w2",yValue= "y",r=2){
z2=xValue*w1Value
a2=sigmoid(z2)
z3=a2*w2Value
yhat=sigmoid(z3)
delta3=(yValue-yhat)*(-sigmoidPrime(z3))
dJ_dw2=delta3*a2
delta2=delta3*w2Value*sigmoidPrime(z2)
dJ_dw1=delta2*xValue
w2Value =w2Value-r*dJ_dw2
w1Value =w1Value-r*dJ_dw1
returnedList=list(w1Value,w2Value)
returnedList<-setNames(returnedList, c("w1","w2"))
return(returnedList)
}
x=0.2
w1=0.3
w2=0.4
y=0.5
weights
weights=c(w1,w2)
weightsList=updateWeights(.5,weights[1],weights[2], .6,.2)
is(weightsList[[1]])
weights=c(weightsList[[1]],weightsList[[2]])
weights
setwd
wine <- read.csv("winemag-data-130k-v2.csv")
wine
wine_up <- wine$variety == "chardonnay"
wine$variety == "Chardonnay"
wine$country == "Australia"
wine$country == "New Zealand"
wine_up_bool <- wine$variety == "Chardonnay" & (wine$country == "Australia" | wine$country == "New Zealand")
wine_updated <- wine[wine_up_bool,]
wine_updated
req_colmns <- c("price", "points")
wine_updated <- wine_updated[,req_colmns]
view(wine_updated)
wine_updated <- wine[,req_colmns]
floor(2)
floor(1.9)
floor(1.3)
smp_size <- floor(0.75 * nrow(wine_updated))
set.seed(123)
nrow(wine_updated)
train_ind <- sample(seq_len(nrow(wine_updated)), size = smp_size)
normal.5 <- function(x){
xNew <- ((x- min(x))/(max(x)-min(x)))-.5
return(xNew)
}
view(train)
train <- wine_updated[train_ind, ]
test <- wine_updated[-train_ind, ]
x = c(0, 3, 10)
normal.5(x)
points= train$points
points=normal.5(points)
price= train$price
price
price=normal.5(price)
updateWeights(points[1],x1,x2,price[1], 1)
points[1]
predNNSingleValue<-function(inputX=points, outputY=price, xValue=.90,learnR=1){
#Sample call: predNNSingle(inputX=points,outputY=price,xValue=.90,  learnR=1)
count=0
weights= runif(2,-1,1)
for (input in inputX){
count=count+1
currentPrice=outputY[count]
weightsList = updateWeights(input, weights[1],weights[2], currentPrice , learnR)
weights[1]
weights=c(weightsList[[1]],weightsList[[2]])
}
z2=xValue*weights[1]
a2=sigmoid(z2)
z3=a2*weights[2]
yhat=sigmoid(z3)
print(paste0("number of rows: ",count, weights))
print(paste0("Given the input: ", xValue))
print("the predicted output would be")
return(yhat)
}
predNNSingleValue(inputX=points,outputY=price,xValue=.2, learnR=1)
